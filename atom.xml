<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://schmurfy.github.com/</id>
  <title>Chained Experiments</title>
  <updated>2011-05-06T13:00:00Z</updated>
  <link rel="alternate" href="http://schmurfy.github.com/"/>
  <link rel="self" href="http://schmurfy.github.com/atom.xml"/>
  <author>
    <name>Julien Ammous</name>
    <uri>http://schmurfy.github.com</uri>
  </author>
  <entry>
    <id>tag:schmurfy.github.com,2011-05-06:/2011/05/06/create_your_github_user_page_with_nanoc.html</id>
    <title type="html">Create your Github user page with nanoc</title>
    <published>2011-05-06T13:00:00Z</published>
    <updated>2011-05-06T13:00:00Z</updated>
    <link rel="alternate" href="http://schmurfy.github.com/2011/05/06/create_your_github_user_page_with_nanoc.html"/>
    <content type="html">&lt;p&gt;I finally took the time to build myself a fully featured blog and start writing down things that floats
in my head both for me and for anyone it can help.&lt;br&gt;
I was sure of one thing: I wanted a static blog, I do not want having to learn to use a complex
admin interface that would certainly not fit me needs and end with a fork to maintain...&lt;br&gt;
Another reason is that I prefer to edit posts in my favorite text editor (that would be textmate)
than editing it online with a pale copy of a real text editor.&lt;/p&gt;

&lt;p&gt;I was looking at github user pages for quite some time but the quick look I gave to jekyll did not convinced
me so here is an alternative way to build your github user page without using jekyll.&lt;/p&gt;

&lt;h2&gt;What we will use&lt;/h2&gt;

&lt;p&gt;Nanoc is a powerful ruby static website generator, I already used it before for a personal documentation
repository (something like my personal knowledge database) and tested the alternatives before settling on
it so there was little to no reason to switch except if a new alternative with more features had appeared
but jekyll is certainly not that.&lt;/p&gt;

&lt;p&gt;So nanoc it is !&lt;br&gt;&lt;/p&gt;

&lt;p&gt;This article will not teach you how to use nanoc by itself, if you are interested in it you can check:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nanoc.stoneship.org/"&gt;The Official Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mgutz/nanoc3_blog"&gt;The template I based mine on&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/schmurfy/schmurfy.github.com/tree/source"&gt;And obviously my template&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;How github user's pages work&lt;/h2&gt;

&lt;p&gt;The user page system is really simple to use and works really well, what they did is that if you create a repository
with a special name (&lt;code&gt;&amp;lt;user&amp;gt;&lt;/code&gt;.github.com) then anything pushed in the master branch will be available at the
same address, pretty neat and effective !&lt;/p&gt;

&lt;p&gt;The master branch can either contains raw html/css/... documents or a jekyll project which will be
used to generate the html so in our case we want to push the resulting output from nanoc.&lt;/p&gt;

&lt;h2&gt;Workspace organization&lt;/h2&gt;

&lt;p&gt;What I did is use another branch than master to host the actual nanoc application and push the
resulting html in the master branch, here is how I organized my workspace:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;root &lt;span class="o"&gt;[&lt;/span&gt; -&amp;gt; &lt;span class="s2"&gt;"source"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
  |- content &lt;span class="o"&gt;(&lt;/span&gt;nanoc templates&lt;span class="o"&gt;)&lt;/span&gt;
  |- layouts &lt;span class="o"&gt;(&lt;/span&gt;nanoc layouts&lt;span class="o"&gt;)&lt;/span&gt;
  |- lib &lt;span class="o"&gt;(&lt;/span&gt;ruby files extending nanoc&lt;span class="o"&gt;)&lt;/span&gt;
  |- output &lt;span class="o"&gt;[&lt;/span&gt; -&amp;gt; &lt;span class="s2"&gt;"master"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;root will contains a working copy of our git repository pointing at the source branch and
output will contains a working copy of the same repository pointing at the master branch,
the tricky part here is that these two branches need to be completly separated,
we wil now see how (there is a guide on github to do this too).&lt;/p&gt;

&lt;h2&gt;Setting up things&lt;/h2&gt;

&lt;p&gt;First we need to initialize the repository, just use your root folder for this
("$" is the prompt here):&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# initialize the local repository&lt;/span&gt;
  &lt;span class="nv"&gt;$ &lt;/span&gt;git init
&lt;span class="c"&gt;# commits your files&lt;/span&gt;
  &lt;span class="nv"&gt;$ &lt;/span&gt;git add .
  &lt;span class="nv"&gt;$ &lt;/span&gt;git ci -m &lt;span class="s2"&gt;"init"&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we have a master branch containing our site's source which is not yet what we
want, so we will now rename this branch and push it to the remote:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# rename our master branch&lt;/span&gt;
  &lt;span class="nv"&gt;$ &lt;/span&gt;git br -m master &lt;span class="nb"&gt;source&lt;/span&gt;
&lt;span class="c"&gt;# add your github repository as origin&lt;/span&gt;
  &lt;span class="nv"&gt;$ &lt;/span&gt;git add origin git@github.com:&lt;span class="o"&gt;[&lt;/span&gt;user&lt;span class="o"&gt;]&lt;/span&gt;/&lt;span class="o"&gt;[&lt;/span&gt;user&lt;span class="o"&gt;]&lt;/span&gt;.github.com.git
&lt;span class="c"&gt;# push to the remote repository and set the master local branch to&lt;/span&gt;
&lt;span class="c"&gt;# track origin/master&lt;/span&gt;
  &lt;span class="nv"&gt;$ &lt;/span&gt;git push -u origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have a repository with only one branch: source, now we can create the master branch.&lt;br&gt;
remove the output folder if it exists (rm -rf output) and do this:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# fetch a working copy of your repository&lt;/span&gt;
  &lt;span class="nv"&gt;$ &lt;/span&gt;git clone git@github.com:&lt;span class="o"&gt;[&lt;/span&gt;user&lt;span class="o"&gt;]&lt;/span&gt;/&lt;span class="o"&gt;[&lt;/span&gt;user&lt;span class="o"&gt;]&lt;/span&gt;.github.com.git output
  &lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;output
&lt;span class="c"&gt;# create the isolated branch&lt;/span&gt;
  &lt;span class="nv"&gt;$ &lt;/span&gt;git symbolic-ref HEAD refs/heads/master
  &lt;span class="nv"&gt;$ &lt;/span&gt;rm .git/index
  &lt;span class="nv"&gt;$ &lt;/span&gt;git clean -fdx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should now have your master branch ready, just generate your nanoc output
(nanoc3 co in the root folder) and commit &amp;amp; push your files and your site should
appears shortly.&lt;/p&gt;

&lt;p&gt;(Actually it took a second commit for me for the site to effectively appears)&lt;/p&gt;

&lt;p&gt;One thing allowing this setup to work is that nanoc do not delete the output folder
when rebuilding the site, it justs overwrite existing files.&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>tag:schmurfy.github.com,2011-05-03:/2011/05/03/simple_yet_secure_file_server.html</id>
    <title type="html">Simple yet secure file server</title>
    <published>2011-05-03T20:00:00Z</published>
    <updated>2011-05-03T20:00:00Z</updated>
    <link rel="alternate" href="http://schmurfy.github.com/2011/05/03/simple_yet_secure_file_server.html"/>
    <content type="html">&lt;p&gt;This is a problem I faced many times but did not had the opportunity to find a good approach to the problem,
recently I faced it once again and found what i consider a really nice way to implement it efficiently and securely.&lt;/p&gt;

&lt;h2&gt;The problem&lt;/h2&gt;

&lt;p&gt;The problem is quite simple to describe: how can you serve a file to a given client without allowing it full
access to the repository, and serves it fast and efficiently resources wise.&lt;/p&gt;

&lt;h2&gt;My environment&lt;/h2&gt;

&lt;p&gt;Here are some background on my environment to better understand why I did things that way: The application I work
on is already made of multiple distinct ruby servers/daemons speaking to each other using an in house network protocol,
aside of those I already have a redis server used mostly for caching data.&lt;/p&gt;

&lt;h2&gt;Let's get to work !&lt;/h2&gt;

&lt;p&gt;Among time I tried different solutions to this problem:&lt;/p&gt;

&lt;h3&gt;The worst method&lt;/h3&gt;

&lt;p&gt;You set up a webserver to serve a defined folder where all your files are
  and your disable the autoindex feature.&lt;/p&gt;

&lt;p&gt;The problems are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if someone have he link it can download again the file whenever he wants
(it may or may not be a problem depending on your usage)&lt;/li&gt;
&lt;li&gt;a client with the link can pass it to anyone to download the file&lt;/li&gt;
&lt;li&gt;a client may guess another file's path and download it&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The last time I used this method the filenames were alphanumeric strings
  of 32 characters, this at least reduce the guessing risk to nearly zero&lt;/p&gt;

&lt;h3&gt;The second, slightly better&lt;/h3&gt;

&lt;p&gt;We now have a web application (php, ruby, perl, etc...) which serves the pages
  to the clients, the files are stored on the disk outside the webserver root and so, are not
  accessible directly by clients.&lt;/p&gt;

&lt;p&gt;The application authenticate the client (how it is done is irrelevant here) and then the
  application sends the file's content itself to the client.&lt;/p&gt;

&lt;p&gt;The problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You monopolize one instance of your application for this task (it is
especially a problem with ruby on rails)&lt;/li&gt;
&lt;li&gt;chances are that streaming the file through your application will slow down
the transfer speed and it can takes more resources on the server.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;At least with this approach a client can no longer access a file we don't want him
  to download and even if he manages to guess another file's name he will just be rejected.&lt;/p&gt;

&lt;p&gt;Clients can still exchanges login/pass but that's another story, let's consider that our
  clients here do not share passwords.&lt;/p&gt;

&lt;h3&gt;Now we talk&lt;/h3&gt;

&lt;p&gt;I know this is not a terribly big news but apache have support for sending files directly
  to a client when asked by an application running below it, when an application returns
  an header "X-Sendfile" pointing to an absolute path on the webserver disk then this file
  will be streamed by apache to the client.&lt;/p&gt;

&lt;p&gt;Nginx has a similar feature but it works differently, here is an example config file:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;'[...]/public'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;passenger_enabled&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;passenger_min_instances&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;"/data"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;internal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;"/path/to/data"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

  

&lt;p&gt;We have a sinatra application running under passenger on port 3000 and we declare
  an internal location where our files are, the /data path will not be accessible
  for web clients.&lt;/p&gt;

&lt;p&gt;Now the next part is to send the required headers, here is what a minimal sinatra
  application looks like for doing this:
&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rubygems'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'sinatra'&lt;/span&gt;

&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;"/:token/*"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# we use splat here to allow the path to include "/"&lt;/span&gt;
  &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:splat&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="s1"&gt;'application/x-zip'&lt;/span&gt;

&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="c1"&gt;# Set the filename for the browser, you can force it&lt;/span&gt;
      &lt;span class="c1"&gt;# or just use the original one ( File.basename(path) )&lt;/span&gt;
      &lt;span class="s2"&gt;"Content-Disposition"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"attachment; filename="&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="c1"&gt;# and ask nginx to send this file to the client&lt;/span&gt;
  &lt;span class="s2"&gt;"X-Accel-Redirect"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"/data/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;# finally return an empty body&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a minimal application, no authentication, no security check.
  Now if we want a full application we need some kind of strategy to ensure the client
  have access to the file he asked, I did this by using redis:&lt;/p&gt;

&lt;p&gt;When a client wants a file he first needs to ask our main application (this is
  the one he is connected to), this application will respond with a token and a path (
  the token is saved in the redis database and set to expire in a fixed delay),
  the client will then ask the file server for this file with the token just received,
  here is the complete sinatra application:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rubygems'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'sinatra'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'redis'&lt;/span&gt;


&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;"/:token/*"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# Connect to the redis database&lt;/span&gt;
  &lt;span class="n"&gt;redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Redis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;
  &lt;span class="c1"&gt;# check the specified token&lt;/span&gt;
  &lt;span class="n"&gt;allowed_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"file_download:&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:token&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:splat&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# only only passage if the token exists and the path asked&lt;/span&gt;
  &lt;span class="c1"&gt;# is the same as the one associated with the token in redis&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allowed_path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# set the content type so the browser reacts as expected&lt;/span&gt;
    &lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="s1"&gt;'xxx/yyy'&lt;/span&gt;

    &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"Content-Disposition"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="sx"&gt;%{attachment; filename="file.ext"}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"X-Accel-Redirect"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"/data/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="c1"&gt;# return a 404 if access is refused&lt;/span&gt;
    &lt;span class="c1"&gt;# so the client have no way to tells if access was refused&lt;/span&gt;
    &lt;span class="c1"&gt;# or the file really does not exists&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;Sinatra&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;NotFound&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;

  

&lt;p&gt;Since the keys in redis have an expiration delay the client is only allowed to
  access the file once and has to make another request to download it again.&lt;/p&gt;

&lt;p&gt;The expiration delay can even be really short since the check is done at the
  start of the download, having a too short delay may cause more problems though
  if the client need to retry the download for any reason.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Thanks to redis (it would also work with any database actually) you can distribute the
  roles between your applications as you wish and with the configuration shown above any
  application in your environment could deliver a pass to access a given file allowing
  them to share a single "file server" and still maintaining tight access control.&lt;/p&gt;

&lt;p&gt;Following the same idea we could also register a number of allowed downloads in redis
  and decrement the counter each time the url is accessed, the atomic nature of redis
  operations makes this really easy to do.&lt;/p&gt;</content>
  </entry>
</feed>
